>>> score([(20.0, 10.0, 'R'), (25.0, 22.0, 'Y'), (42.0, 37.0, 'R')])
<DEFINITION>
class DrawCurl(OutputProcessor):

    def __init__(self, stonelist, inch, **kwargs):
        
        # call initialization method of base class
        super().__init__(**kwargs)
        
        self.stonelist = stonelist
        self.inch = inch

    def renderOutput(self, **kwargs):
        
        if self.getStatus() == 'AC':
            return
 
        from math import pi
        from io import StringIO
        colormap = {'R' : '#C81A2D', 'Y' : '#EBD141'}
        colormap['G'] = colormap['Y']

        outfile = StringIO()
        dim = (200, 200)
        center = [x/2 for x in dim]
        maxradius = min(dim) // 2
        maxradius = round(0.8*maxradius)
        ticksperinch = maxradius/(12*6)
        middleradius = round((2/3)*maxradius)
        smallradius = round((1/3)*maxradius)
        innerradius = round((1/12)*maxradius)
        stoneradius = (36 / (2 * pi)) * ticksperinch

        print('<svg xmlns="http://www.w3.org/2000/svg" width="{}" height="{}">'.format(*dim), file=outfile)
        print('<circle cx="{}" cy="{}" r="{}" stroke="black" stroke-width="0" fill="#F35A61" />.'.format(*center, maxradius), file=outfile)
        print('<circle cx="{}" cy="{}" r="{}" stroke="black" stroke-width="0" fill="#FFFFFF" />.'.format(*center, middleradius), file=outfile)
        print('<circle cx="{}" cy="{}" r="{}" stroke="black" stroke-width="0" fill="#6A7FBB" />.'.format(*center, smallradius), file=outfile)
        print('<circle cx="{}" cy="{}" r="{}" stroke="black" stroke-width="0" fill="#FFFFFF" />.'.format(*center, innerradius), file=outfile)
        print('<line x1="{centerx}" y1="0" x2="{centerx}" y2="{dimy}" style="stroke:rgb(105,105,105);stroke-width:2;stroke-opacity:0.2" />'.format(centerx=center[0], dimy=dim[1]), file=outfile)
        print('<line x1="0" y1="{centery}" x2="{dimx}" y2="{centery}" style="stroke:rgb(105,105,105);stroke-width:2;stroke-opacity:0.2" />'.format(centery=center[1], dimx=dim[0]), file=outfile)

        def placeStone(x, y, color='R'):
            stonecoord = tuple(ticksperinch*r + c for r, c in zip((x, y), center))
            print('<circle cx="{}" cy="{}" r="{}" stroke="black" stroke-width="0" fill="#000000" />.'.format(*stonecoord, stoneradius), file=outfile)
            print('<circle cx="{}" cy="{}" r="{}" stroke="black" stroke-width="0" fill="{}" />.'.format(*stonecoord, 0.7*stoneradius, colormap[color]), file=outfile)


        for x, y, color in self.stonelist:
            if self.inch is False:
                x, y = (r/0.0254 for r in (x, y))

            placeStone(x, -y, color)

        print('</svg>', file=outfile)

        self.addMessage(outfile.getvalue(), escape=False, plain=True)

</DEFINITION>
<OUTPUTPROCESSOR>
DrawCurl([(20.0, 10.0, 'R'), (25.0, 22.0, 'Y'), (42.0, 37.0, 'R')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(20.0, 10.0, 'R'), (25.0, 22.0, 'R'), (42.0, 37.0, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(20.0, 10.0, 'R'), (25.0, 22.0, 'R'), (42.0, 37.0, 'Y')], None)
</OUTPUTPROCESSOR>
(2, 0)

>>> score([(20.0, 10.0, 'R'), (25.0, 22.0, 'R'), (42.0, 37.0, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(20.0, 10.0, 'R'), (25.0, 22.0, 'R'), (42.0, 37.0, 'R')], None)
</OUTPUTPROCESSOR>
(3, 0)

>>> score([(79.0, -0.0, 'R'), (55.9, -55.9, 'R'), (0.0, -79.0, 'R'), (-55.9, -55.9, 'Y'), (-79.0, -0.0, 'Y'), (-55.9, 55.9, 'R'), (-0.0, 79.0, 'R'), (55.9, 55.9, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(79.0, -0.0, 'R'), (55.9, -55.9, 'R'), (0.0, -79.0, 'R'), (-55.9, -55.9, 'Y'), (-79.0, -0.0, 'Y'), (-55.9, 55.9, 'R'), (-0.0, 79.0, 'R'), (55.9, 55.9, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 0)

>>> score([(19.0, -45.6, 'Y'), (13.5, -1.2, 'Y'), (92.1, -15.8, 'R'), (-8.8, 4.0, 'Y'), (34.1, 24.9, 'R'), (-79.1, 49.1, 'R'), (-1.5, 54.6, 'Y'), (-66.1, -44.6, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(19.0, -45.6, 'Y'), (13.5, -1.2, 'Y'), (92.1, -15.8, 'R'), (-8.8, 4.0, 'Y'), (34.1, 24.9, 'R'), (-79.1, 49.1, 'R'), (-1.5, 54.6, 'Y'), (-66.1, -44.6, 'R')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(-35.9, 39.7, 'R'), (73.3, 39.2, 'R'), (-46.0, 47.6, 'R'), (-38.9, -30.3, 'R'), (-7.4, 46.6, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-35.9, 39.7, 'R'), (73.3, 39.2, 'R'), (-46.0, 47.6, 'R'), (-38.9, -30.3, 'R'), (-7.4, 46.6, 'R')], None)
</OUTPUTPROCESSOR>
(4, 0)

>>> score([(4.6, 3.7, 'R'), (-11.6, 76.1, 'Y'), (30.8, -5.4, 'R'), (89.6, 42.8, 'R'), (-57.1, 65.2, 'Y'), (19.5, -48.3, 'Y'), (-20.7, -2.8, 'Y'), (-38.3, 60.8, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(4.6, 3.7, 'R'), (-11.6, 76.1, 'Y'), (30.8, -5.4, 'R'), (89.6, 42.8, 'R'), (-57.1, 65.2, 'Y'), (19.5, -48.3, 'Y'), (-20.7, -2.8, 'Y'), (-38.3, 60.8, 'R')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(-31.9, 16.6, 'R'), (-2.2, -35.6, 'R'), (18.3, -15.2, 'R'), (-26.6, 34.7, 'R'), (-62.0, 37.5, 'R'), (57.6, -16.8, 'R'), (-33.3, -90.6, 'R'), (-2.6, 14.9, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-31.9, 16.6, 'R'), (-2.2, -35.6, 'R'), (18.3, -15.2, 'R'), (-26.6, 34.7, 'R'), (-62.0, 37.5, 'R'), (57.6, -16.8, 'R'), (-33.3, -90.6, 'R'), (-2.6, 14.9, 'R')], None)
</OUTPUTPROCESSOR>
(7, 0)

>>> score([(25.3, -29.3, 'Y'), (16.9, 43.7, 'Y'), (55.2, -48.1, 'R'), (-16.8, -53.2, 'Y'), (-4.6, -38.9, 'R'), (55.3, -83.2, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(25.3, -29.3, 'Y'), (16.9, 43.7, 'Y'), (55.2, -48.1, 'R'), (-16.8, -53.2, 'Y'), (-4.6, -38.9, 'R'), (55.3, -83.2, 'R')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(-2.9, 3.6, 'Y'), (-72.0, -31.1, 'R'), (7.2, 97.0, 'Y'), (-41.9, 50.9, 'R'), (81.8, 44.5, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-2.9, 3.6, 'Y'), (-72.0, -31.1, 'R'), (7.2, 97.0, 'Y'), (-41.9, 50.9, 'R'), (81.8, 44.5, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(-5.7, -0.9, 'R'), (29.3, -90.6, 'Y'), (67.5, 19.6, 'R'), (-84.2, -32.6, 'Y'), (-29.4, -26.7, 'Y'), (0.6, 39.2, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-5.7, -0.9, 'R'), (29.3, -90.6, 'Y'), (67.5, 19.6, 'R'), (-84.2, -32.6, 'Y'), (-29.4, -26.7, 'Y'), (0.6, 39.2, 'R')], None)
</OUTPUTPROCESSOR>
(2, 0)

>>> score([(-42.8, -24.2, 'R'), (1.9, -23.9, 'R'), (-52.3, -6.4, 'Y'), (-54.9, 63.9, 'Y'), (2.5, 52.0, 'R'), (49.8, 21.5, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-42.8, -24.2, 'R'), (1.9, -23.9, 'R'), (-52.3, -6.4, 'Y'), (-54.9, 63.9, 'Y'), (2.5, 52.0, 'R'), (49.8, 21.5, 'Y')], None)
</OUTPUTPROCESSOR>
(3, 0)

>>> score([(28.4, 65.5, 'R'), (1.0, -2.1, 'R'), (-9.4, 9.0, 'Y'), (4.5, -43.6, 'Y'), (15.4, 10.0, 'R'), (48.3, 73.9, 'R'), (16.5, 34.9, 'Y'), (-11.5, -74.1, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(28.4, 65.5, 'R'), (1.0, -2.1, 'R'), (-9.4, 9.0, 'Y'), (4.5, -43.6, 'Y'), (15.4, 10.0, 'R'), (48.3, 73.9, 'R'), (16.5, 34.9, 'Y'), (-11.5, -74.1, 'Y')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(-38.7, 56.4, 'Y'), (-11.7, 15.0, 'Y'), (-81.8, 36.1, 'R'), (38.5, -24.0, 'Y'), (18.1, -3.7, 'R'), (4.7, -23.7, 'R'), (95.6, -9.5, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-38.7, 56.4, 'Y'), (-11.7, 15.0, 'Y'), (-81.8, 36.1, 'R'), (38.5, -24.0, 'Y'), (18.1, -3.7, 'R'), (4.7, -23.7, 'R'), (95.6, -9.5, 'Y')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(61.1, 22.1, 'R'), (54.5, 44.7, 'Y'), (13.2, -20.7, 'Y'), (65.8, 50.1, 'Y'), (25.8, 49.7, 'R'), (76.9, -25.0, 'Y'), (-9.6, 52.1, 'R'), (-7.6, -44.3, 'R'), (76.4, -47.2, 'Y'), (-17.4, 28.2, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(61.1, 22.1, 'R'), (54.5, 44.7, 'Y'), (13.2, -20.7, 'Y'), (65.8, 50.1, 'Y'), (25.8, 49.7, 'R'), (76.9, -25.0, 'Y'), (-9.6, 52.1, 'R'), (-7.6, -44.3, 'R'), (76.4, -47.2, 'Y'), (-17.4, 28.2, 'R')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(-6.1, -12.5, 'Y'), (2.2, -73.6, 'R'), (35.2, -79.5, 'Y'), (-95.6, 22.4, 'R'), (-44.1, -20.5, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-6.1, -12.5, 'Y'), (2.2, -73.6, 'R'), (35.2, -79.5, 'Y'), (-95.6, 22.4, 'R'), (-44.1, -20.5, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(5.5, -6.7, 'R'), (41.0, -81.5, 'R'), (-77.9, 42.3, 'R'), (51.5, 47.6, 'R'), (-8.7, -5.7, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(5.5, -6.7, 'R'), (41.0, -81.5, 'R'), (-77.9, 42.3, 'R'), (51.5, 47.6, 'R'), (-8.7, -5.7, 'R')], None)
</OUTPUTPROCESSOR>
(3, 0)

>>> score([(30.5, -5.5, 'Y'), (20.7, 5.8, 'R'), (-74.6, 35.7, 'Y'), (-49.4, -18.9, 'R'), (36.9, 7.8, 'Y'), (51.8, -0.6, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(30.5, -5.5, 'Y'), (20.7, 5.8, 'R'), (-74.6, 35.7, 'Y'), (-49.4, -18.9, 'R'), (36.9, 7.8, 'Y'), (51.8, -0.6, 'R')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(-43.7, 85.9, 'R'), (77.4, 41.8, 'Y'), (16.1, -95.0, 'R'), (-58.2, -32.1, 'R'), (-33.2, -19.0, 'Y'), (-24.2, 17.6, 'R'), (3.1, 41.4, 'Y'), (77.9, -25.2, 'Y'), (17.0, 15.8, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-43.7, 85.9, 'R'), (77.4, 41.8, 'Y'), (16.1, -95.0, 'R'), (-58.2, -32.1, 'R'), (-33.2, -19.0, 'Y'), (-24.2, 17.6, 'R'), (3.1, 41.4, 'Y'), (77.9, -25.2, 'Y'), (17.0, 15.8, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(-1.7, -8.4, 'R'), (-7.4, 60.9, 'R'), (-36.5, 5.3, 'Y'), (-65.9, 63.8, 'R'), (26.6, 42.3, 'Y'), (55.9, -73.7, 'Y'), (8.4, -33.6, 'Y'), (36.8, -23.4, 'Y'), (-19.7, -16.6, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-1.7, -8.4, 'R'), (-7.4, 60.9, 'R'), (-36.5, 5.3, 'Y'), (-65.9, 63.8, 'R'), (26.6, 42.3, 'Y'), (55.9, -73.7, 'Y'), (8.4, -33.6, 'Y'), (36.8, -23.4, 'Y'), (-19.7, -16.6, 'R')], None)
</OUTPUTPROCESSOR>
(2, 0)

>>> score([(-9.7, 29.4, 'R'), (22.3, -25.1, 'R'), (-91.7, -3.3, 'Y'), (0.1, -0.0, 'Y'), (-62.7, 12.4, 'Y'), (-49.4, 67.7, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-9.7, 29.4, 'R'), (22.3, -25.1, 'R'), (-91.7, -3.3, 'Y'), (0.1, -0.0, 'Y'), (-62.7, 12.4, 'Y'), (-49.4, 67.7, 'R')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(-8.6, 5.9, 'Y'), (-85.6, 40.2, 'R'), (-7.1, -98.0, 'R'), (-93.4, -27.2, 'Y'), (30.1, -42.5, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-8.6, 5.9, 'Y'), (-85.6, 40.2, 'R'), (-7.1, -98.0, 'R'), (-93.4, -27.2, 'Y'), (30.1, -42.5, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(-3.6, -4.2, 'R'), (28.9, 82.3, 'Y'), (4.8, -17.4, 'R'), (87.0, 13.0, 'Y'), (24.3, 34.0, 'Y'), (-24.1, -58.6, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-3.6, -4.2, 'R'), (28.9, 82.3, 'Y'), (4.8, -17.4, 'R'), (87.0, 13.0, 'Y'), (24.3, 34.0, 'Y'), (-24.1, -58.6, 'R')], None)
</OUTPUTPROCESSOR>
(2, 0)

>>> score([(-10.3, -35.0, 'R'), (6.2, -41.1, 'R'), (-8.7, -13.3, 'Y'), (-56.4, 62.8, 'Y'), (31.4, -45.0, 'Y'), (-0.5, -0.4, 'Y'), (38.0, -59.4, 'R'), (98.2, 12.2, 'Y'), (-17.4, -68.5, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-10.3, -35.0, 'R'), (6.2, -41.1, 'R'), (-8.7, -13.3, 'Y'), (-56.4, 62.8, 'Y'), (31.4, -45.0, 'Y'), (-0.5, -0.4, 'Y'), (38.0, -59.4, 'R'), (98.2, 12.2, 'Y'), (-17.4, -68.5, 'R')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(-56.1, 25.5, 'R'), (14.2, -10.9, 'Y'), (-13.2, -60.6, 'R'), (-47.3, 54.8, 'Y'), (58.0, 8.9, 'Y'), (28.7, 4.1, 'Y'), (-11.5, 24.4, 'R'), (-86.9, 29.7, 'R'), (-64.0, 9.1, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-56.1, 25.5, 'R'), (14.2, -10.9, 'Y'), (-13.2, -60.6, 'R'), (-47.3, 54.8, 'Y'), (58.0, 8.9, 'Y'), (28.7, 4.1, 'Y'), (-11.5, 24.4, 'R'), (-86.9, 29.7, 'R'), (-64.0, 9.1, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(-57.3, -72.2, 'Y'), (37.2, -58.7, 'R'), (-53.4, -52.8, 'R'), (-15.6, -60.5, 'Y'), (6.7, -38.6, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-57.3, -72.2, 'Y'), (37.2, -58.7, 'R'), (-53.4, -52.8, 'R'), (-15.6, -60.5, 'Y'), (6.7, -38.6, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(-18.6, -67.5, 'Y'), (74.8, -9.4, 'Y'), (-93.2, -0.7, 'Y'), (-3.1, -3.5, 'Y'), (13.3, 0.8, 'Y'), (37.4, 66.4, 'Y'), (-40.1, -55.8, 'Y'), (20.7, -73.5, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-18.6, -67.5, 'Y'), (74.8, -9.4, 'Y'), (-93.2, -0.7, 'Y'), (-3.1, -3.5, 'Y'), (13.3, 0.8, 'Y'), (37.4, 66.4, 'Y'), (-40.1, -55.8, 'Y'), (20.7, -73.5, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 7)

>>> score([(-42.2, -54.7, 'Y'), (12.8, 4.0, 'R'), (-0.7, -44.9, 'Y'), (-70.4, -62.1, 'R'), (-72.4, 17.8, 'Y'), (26.7, -44.7, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-42.2, -54.7, 'Y'), (12.8, 4.0, 'R'), (-0.7, -44.9, 'Y'), (-70.4, -62.1, 'R'), (-72.4, 17.8, 'Y'), (26.7, -44.7, 'R')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(-14.3, 6.5, 'Y'), (-55.3, -32.9, 'R'), (-71.7, -25.2, 'R'), (-2.2, -2.1, 'Y'), (24.8, -33.1, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-14.3, 6.5, 'Y'), (-55.3, -32.9, 'R'), (-71.7, -25.2, 'R'), (-2.2, -2.1, 'Y'), (24.8, -33.1, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 3)

>>> score([(32.6, -59.8, 'R'), (-36.1, -80.1, 'R'), (-40.2, 67.8, 'R'), (-14.0, 65.4, 'Y'), (33.3, -14.3, 'Y'), (-31.2, 42.8, 'Y'), (18.3, -92.6, 'R'), (42.4, 79.6, 'R'), (89.7, 4.6, 'Y'), (2.7, 2.0, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(32.6, -59.8, 'R'), (-36.1, -80.1, 'R'), (-40.2, 67.8, 'R'), (-14.0, 65.4, 'Y'), (33.3, -14.3, 'Y'), (-31.2, 42.8, 'Y'), (18.3, -92.6, 'R'), (42.4, 79.6, 'R'), (89.7, 4.6, 'Y'), (2.7, 2.0, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 4)

>>> score([(13.7, 42.9, 'Y'), (2.7, -30.7, 'Y'), (11.5, 22.0, 'Y'), (-14.6, 97.7, 'Y'), (-10.7, -64.0, 'Y'), (-0.4, -4.6, 'Y'), (11.1, 6.4, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(13.7, 42.9, 'Y'), (2.7, -30.7, 'Y'), (11.5, 22.0, 'Y'), (-14.6, 97.7, 'Y'), (-10.7, -64.0, 'Y'), (-0.4, -4.6, 'Y'), (11.1, 6.4, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 6)

>>> score([(-66.1, -9.3, 'Y'), (-84.1, -36.5, 'Y'), (35.0, -65.6, 'Y'), (41.6, 75.8, 'R'), (-2.6, 20.6, 'Y'), (33.0, -50.2, 'R'), (12.1, -26.8, 'R'), (76.5, 56.2, 'R'), (17.2, -59.4, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-66.1, -9.3, 'Y'), (-84.1, -36.5, 'Y'), (35.0, -65.6, 'Y'), (41.6, 75.8, 'R'), (-2.6, 20.6, 'Y'), (33.0, -50.2, 'R'), (12.1, -26.8, 'R'), (76.5, 56.2, 'R'), (17.2, -59.4, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(15.8, -3.0, 'R'), (-53.9, -54.1, 'R'), (0.2, 54.3, 'Y'), (-31.5, -55.6, 'Y'), (54.5, 40.8, 'Y'), (30.1, 68.7, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(15.8, -3.0, 'R'), (-53.9, -54.1, 'R'), (0.2, 54.3, 'Y'), (-31.5, -55.6, 'Y'), (54.5, 40.8, 'Y'), (30.1, 68.7, 'R')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(27.3, 46.5, 'R'), (53.9, 57.8, 'R'), (-35.8, 57.2, 'Y'), (-4.0, 12.0, 'Y'), (5.9, 1.3, 'Y'), (-17.2, -42.8, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(27.3, 46.5, 'R'), (53.9, 57.8, 'R'), (-35.8, 57.2, 'Y'), (-4.0, 12.0, 'Y'), (5.9, 1.3, 'Y'), (-17.2, -42.8, 'R')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(14.0, -48.4, 'Y'), (42.9, -11.9, 'Y'), (-9.9, 56.6, 'R'), (-32.1, -51.9, 'Y'), (16.7, -32.8, 'Y'), (51.3, -68.5, 'R'), (43.5, 11.8, 'R'), (4.6, 3.2, 'R'), (-9.6, 13.4, 'Y'), (21.0, -5.2, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(14.0, -48.4, 'Y'), (42.9, -11.9, 'Y'), (-9.9, 56.6, 'R'), (-32.1, -51.9, 'Y'), (16.7, -32.8, 'Y'), (51.3, -68.5, 'R'), (43.5, 11.8, 'R'), (4.6, 3.2, 'R'), (-9.6, 13.4, 'Y'), (21.0, -5.2, 'R')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(46.1, 14.9, 'Y'), (2.1, 9.3, 'R'), (-0.1, 52.0, 'Y'), (-35.1, 9.2, 'Y'), (-50.3, -57.7, 'R'), (-65.1, 75.8, 'R'), (22.1, 39.4, 'R'), (44.4, -77.3, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(46.1, 14.9, 'Y'), (2.1, 9.3, 'R'), (-0.1, 52.0, 'Y'), (-35.1, 9.2, 'Y'), (-50.3, -57.7, 'R'), (-65.1, 75.8, 'R'), (22.1, 39.4, 'R'), (44.4, -77.3, 'Y')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(2.6, -8.2, 'Y'), (10.5, -23.3, 'R'), (-8.2, -54.6, 'Y'), (-54.9, 80.5, 'R'), (-40.1, -37.4, 'Y'), (47.5, -11.7, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(2.6, -8.2, 'Y'), (10.5, -23.3, 'R'), (-8.2, -54.6, 'Y'), (-54.9, 80.5, 'R'), (-40.1, -37.4, 'Y'), (47.5, -11.7, 'R')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(-41.7, -25.9, 'R'), (40.9, -10.9, 'R'), (-32.9, 21.2, 'Y'), (16.7, -0.1, 'Y'), (36.4, -66.7, 'Y'), (16.8, -50.0, 'R'), (81.8, 47.2, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-41.7, -25.9, 'R'), (40.9, -10.9, 'R'), (-32.9, 21.2, 'Y'), (16.7, -0.1, 'Y'), (36.4, -66.7, 'Y'), (16.8, -50.0, 'R'), (81.8, 47.2, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(-0.7, 4.7, 'R'), (-60.7, 60.5, 'Y'), (22.0, 28.1, 'Y'), (50.4, -51.2, 'Y'), (-26.0, -14.9, 'Y'), (-14.8, -6.8, 'R'), (6.8, 16.6, 'R'), (-50.6, 34.2, 'Y'), (-25.3, 38.3, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-0.7, 4.7, 'R'), (-60.7, 60.5, 'Y'), (22.0, 28.1, 'Y'), (50.4, -51.2, 'Y'), (-26.0, -14.9, 'Y'), (-14.8, -6.8, 'R'), (6.8, 16.6, 'R'), (-50.6, 34.2, 'Y'), (-25.3, 38.3, 'R')], None)
</OUTPUTPROCESSOR>
(3, 0)

>>> score([(-6.2, -13.3, 'Y'), (7.7, 9.9, 'R'), (-77.2, -35.4, 'R'), (-37.5, 67.2, 'Y'), (-8.1, -39.1, 'R'), (-8.4, 2.3, 'Y'), (47.2, 4.9, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-6.2, -13.3, 'Y'), (7.7, 9.9, 'R'), (-77.2, -35.4, 'R'), (-37.5, 67.2, 'Y'), (-8.1, -39.1, 'R'), (-8.4, 2.3, 'Y'), (47.2, 4.9, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(46.6, 6.8, 'R'), (40.8, -66.9, 'Y'), (4.7, 26.2, 'Y'), (59.3, 67.7, 'Y'), (-11.0, -20.2, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(46.6, 6.8, 'R'), (40.8, -66.9, 'Y'), (4.7, 26.2, 'Y'), (59.3, 67.7, 'Y'), (-11.0, -20.2, 'R')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(14.6, -6.7, 'Y'), (16.8, 61.8, 'Y'), (2.2, -5.8, 'R'), (56.7, -60.0, 'R'), (-19.3, -12.0, 'R'), (-10.9, -3.1, 'Y'), (-59.3, 42.6, 'Y'), (-60.9, -75.4, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(14.6, -6.7, 'Y'), (16.8, 61.8, 'Y'), (2.2, -5.8, 'R'), (56.7, -60.0, 'R'), (-19.3, -12.0, 'R'), (-10.9, -3.1, 'Y'), (-59.3, 42.6, 'Y'), (-60.9, -75.4, 'R')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(-11.8, -61.0, 'R'), (-7.5, -7.8, 'R'), (-58.7, -48.8, 'R'), (28.9, -12.0, 'R'), (46.2, 14.0, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-11.8, -61.0, 'R'), (-7.5, -7.8, 'R'), (-58.7, -48.8, 'R'), (28.9, -12.0, 'R'), (46.2, 14.0, 'R')], None)
</OUTPUTPROCESSOR>
(5, 0)

>>> score([(-71.7, -55.7, 'Y'), (-8.4, -23.6, 'R'), (4.6, 51.1, 'Y'), (19.3, 28.0, 'R'), (8.9, -53.4, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-71.7, -55.7, 'Y'), (-8.4, -23.6, 'R'), (4.6, 51.1, 'Y'), (19.3, 28.0, 'R'), (8.9, -53.4, 'Y')], None)
</OUTPUTPROCESSOR>
(2, 0)

>>> score([(-51.2, -25.2, 'R'), (41.0, -44.3, 'Y'), (22.3, -36.7, 'R'), (52.9, 12.0, 'R'), (-13.6, -22.1, 'Y'), (-21.5, -34.3, 'Y'), (67.7, -5.7, 'Y'), (-54.8, -0.8, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-51.2, -25.2, 'R'), (41.0, -44.3, 'Y'), (22.3, -36.7, 'R'), (52.9, 12.0, 'R'), (-13.6, -22.1, 'Y'), (-21.5, -34.3, 'Y'), (67.7, -5.7, 'Y'), (-54.8, -0.8, 'R')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(28.6, 91.3, 'Y'), (-47.9, -66.8, 'R'), (78.6, 39.4, 'Y'), (59.0, 72.5, 'R'), (-80.9, -6.7, 'Y'), (-32.8, -1.7, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(28.6, 91.3, 'Y'), (-47.9, -66.8, 'R'), (78.6, 39.4, 'Y'), (59.0, 72.5, 'R'), (-80.9, -6.7, 'Y'), (-32.8, -1.7, 'R')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(82.4, 20.8, 'R'), (-36.1, -14.3, 'R'), (-15.6, -83.3, 'Y'), (96.7, -8.6, 'Y'), (28.3, -3.0, 'Y'), (-37.4, 39.6, 'Y'), (-16.2, 32.7, 'Y'), (32.1, 88.8, 'R'), (-81.2, -57.6, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(82.4, 20.8, 'R'), (-36.1, -14.3, 'R'), (-15.6, -83.3, 'Y'), (96.7, -8.6, 'Y'), (28.3, -3.0, 'Y'), (-37.4, 39.6, 'Y'), (-16.2, 32.7, 'Y'), (32.1, 88.8, 'R'), (-81.2, -57.6, 'R')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(-62.6, 44.2, 'Y'), (-1.4, 23.8, 'Y'), (-72.6, -60.5, 'R'), (-58.2, 60.1, 'Y'), (-43.9, -3.7, 'R'), (-40.1, -76.0, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-62.6, 44.2, 'Y'), (-1.4, 23.8, 'Y'), (-72.6, -60.5, 'R'), (-58.2, 60.1, 'Y'), (-43.9, -3.7, 'R'), (-40.1, -76.0, 'R')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(-8.6, 71.3, 'R'), (71.0, -14.8, 'R'), (-2.3, -13.3, 'R'), (-2.3, 0.1, 'R'), (-28.1, -20.4, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-8.6, 71.3, 'R'), (71.0, -14.8, 'R'), (-2.3, -13.3, 'R'), (-2.3, 0.1, 'R'), (-28.1, -20.4, 'R')], None)
</OUTPUTPROCESSOR>
(5, 0)

>>> score([(-30.5, -7.7, 'R'), (-42.4, -22.6, 'Y'), (-44.6, 46.0, 'R'), (27.4, -95.5, 'Y'), (44.7, -84.1, 'R'), (42.3, 46.4, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-30.5, -7.7, 'R'), (-42.4, -22.6, 'Y'), (-44.6, 46.0, 'R'), (27.4, -95.5, 'Y'), (44.7, -84.1, 'R'), (42.3, 46.4, 'Y')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(43.2, 1.3, 'Y'), (6.4, 32.9, 'Y'), (15.5, -47.8, 'R'), (3.9, 4.6, 'Y'), (28.5, 68.4, 'Y'), (29.7, -45.6, 'Y'), (-29.9, -19.9, 'R'), (85.5, 29.8, 'R'), (29.8, 41.8, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(43.2, 1.3, 'Y'), (6.4, 32.9, 'Y'), (15.5, -47.8, 'R'), (3.9, 4.6, 'Y'), (28.5, 68.4, 'Y'), (29.7, -45.6, 'Y'), (-29.9, -19.9, 'R'), (85.5, 29.8, 'R'), (29.8, 41.8, 'R')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(-51.9, -63.9, 'R'), (-85.3, -20.3, 'Y'), (-25.1, -91.8, 'Y'), (72.1, 37.6, 'R'), (63.4, 24.1, 'Y'), (81.7, 22.5, 'R'), (-29.5, 12.0, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-51.9, -63.9, 'R'), (-85.3, -20.3, 'Y'), (-25.1, -91.8, 'Y'), (72.1, 37.6, 'R'), (63.4, 24.1, 'Y'), (81.7, 22.5, 'R'), (-29.5, 12.0, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(26.6, 19.3, 'Y'), (86.8, 32.5, 'Y'), (-44.8, -25.2, 'Y'), (-27.3, 88.1, 'Y'), (-58.1, 72.3, 'R'), (-38.0, -10.3, 'Y'), (1.8, -10.2, 'R'), (13.2, 51.1, 'R'), (23.9, -13.2, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(26.6, 19.3, 'Y'), (86.8, 32.5, 'Y'), (-44.8, -25.2, 'Y'), (-27.3, 88.1, 'Y'), (-58.1, 72.3, 'R'), (-38.0, -10.3, 'Y'), (1.8, -10.2, 'R'), (13.2, 51.1, 'R'), (23.9, -13.2, 'R')], None)
</OUTPUTPROCESSOR>
(2, 0)

>>> score([(5.5, 18.7, 'Y'), (-62.5, -59.2, 'R'), (-74.3, 19.1, 'Y'), (-7.2, 78.5, 'Y'), (-21.7, -57.5, 'R'), (-18.5, 20.0, 'Y'), (-74.0, 6.5, 'R'), (-39.2, 23.9, 'R'), (26.3, -9.1, 'Y'), (-24.2, 55.5, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(5.5, 18.7, 'Y'), (-62.5, -59.2, 'R'), (-74.3, 19.1, 'Y'), (-7.2, 78.5, 'Y'), (-21.7, -57.5, 'R'), (-18.5, 20.0, 'Y'), (-74.0, 6.5, 'R'), (-39.2, 23.9, 'R'), (26.3, -9.1, 'Y'), (-24.2, 55.5, 'R')], None)
</OUTPUTPROCESSOR>
(0, 3)

>>> score([(-35.7, 27.7, 'Y'), (-0.6, 58.5, 'R'), (-39.3, 76.3, 'Y'), (-58.8, 47.0, 'Y'), (54.5, 48.3, 'R'), (-22.6, 5.9, 'Y'), (85.1, -37.5, 'R'), (-12.8, -1.6, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(-35.7, 27.7, 'Y'), (-0.6, 58.5, 'R'), (-39.3, 76.3, 'Y'), (-58.8, 47.0, 'Y'), (54.5, 48.3, 'R'), (-22.6, 5.9, 'Y'), (85.1, -37.5, 'R'), (-12.8, -1.6, 'R')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(-73.3, 9.6, 'R'), (-5.3, 18.2, 'Y'), (79.3, 31.4, 'Y'), (43.3, -15.2, 'Y'), (91.1, -16.3, 'Y'), (-35.8, 65.6, 'R'), (-16.0, -2.4, 'R'), (-45.6, -24.4, 'R'), (-42.7, 23.8, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-73.3, 9.6, 'R'), (-5.3, 18.2, 'Y'), (79.3, 31.4, 'Y'), (43.3, -15.2, 'Y'), (91.1, -16.3, 'Y'), (-35.8, 65.6, 'R'), (-16.0, -2.4, 'R'), (-45.6, -24.4, 'R'), (-42.7, 23.8, 'Y')], None)
</OUTPUTPROCESSOR>
(1, 0)

>>> score([(-47.1, -38.0, 'R'), (-2.8, 0.5, 'Y'), (16.9, 30.8, 'Y'), (-57.4, -26.0, 'R'), (56.0, 75.7, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-47.1, -38.0, 'R'), (-2.8, 0.5, 'Y'), (16.9, 30.8, 'Y'), (-57.4, -26.0, 'R'), (56.0, 75.7, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 2)

>>> score([(-8.1, 20.8, 'Y'), (-4.6, 0.3, 'Y'), (7.4, -0.6, 'Y'), (32.5, -63.2, 'Y'), (15.3, 69.7, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-8.1, 20.8, 'Y'), (-4.6, 0.3, 'Y'), (7.4, -0.6, 'Y'), (32.5, -63.2, 'Y'), (15.3, 69.7, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 5)

>>> score([(-44.8, -20.8, 'R'), (-16.8, 45.4, 'R'), (4.4, -8.6, 'Y'), (73.6, -17.3, 'Y'), (-54.6, -7.6, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(-44.8, -20.8, 'R'), (-16.8, 45.4, 'R'), (4.4, -8.6, 'Y'), (73.6, -17.3, 'Y'), (-54.6, -7.6, 'Y')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(56.9, 26.7, 'R'), (-31.6, 31.4, 'R'), (2.4, -3.9, 'Y'), (-59.6, -35.2, 'Y'), (25.4, 22.7, 'Y'), (38.8, 13.1, 'Y'), (-11.5, 2.1, 'R'), (17.4, -50.7, 'R')])
<OUTPUTPROCESSOR>
DrawCurl([(56.9, 26.7, 'R'), (-31.6, 31.4, 'R'), (2.4, -3.9, 'Y'), (-59.6, -35.2, 'Y'), (25.4, 22.7, 'Y'), (38.8, 13.1, 'Y'), (-11.5, 2.1, 'R'), (17.4, -50.7, 'R')], None)
</OUTPUTPROCESSOR>
(0, 1)

>>> score([(20.0, 10.0, 'R'), (-60.9, -64.9, 'Y'), (25.0, 22.0, 'R'), (79.0, -0.0, 'R'), (-83.0, -0.0, 'Y')])
<OUTPUTPROCESSOR>
DrawCurl([(20.0, 10.0, 'R'), (-60.9, -64.9, 'Y'), (25.0, 22.0, 'R'), (79.0, -0.0, 'R'), (-83.0, -0.0, 'Y')], None)
</OUTPUTPROCESSOR>
(2, 0)

>>> score([(-40.2, -18.7, 'Y'), (-51.6, -26.5, 'Y'), (-56.3, 49.6, 'Y'), (-12.6, 59.9, 'R'), (11.6, -11.7, 'R'), (26.4, 39.3, 'R'), (37.3, 5.5, 'R'), (46.6, 37.0, 'R'), (8.6, -68.6, 'Y'), (47.7, 4.4, 'Y'), (24.3, 35.5, 'Y')])
Traceback (most recent call last):
AssertionError: invalid stone positions

>>> score([(1.11, -1.28, 'Y'), (-1.04, -1.28, 'R'), (-0.0, -0.88, 'Y'), (-1.04, -1.03, 'R'), (-1.05, -0.83, 'R'), (-0.39, 0.7, 'Y'), (0.18, -0.56, 'Y'), (-0.07, -0.02, 'R'), (0.2, -0.63, 'R')], inch=False)
Traceback (most recent call last):
AssertionError: invalid stone positions

>>> score([(31.3, 47.2, 'R'), (-26.3, 31.3, 'R'), (-28.7, -29.5, 'R'), (10.0, -18.4, 'R'), (-17.6, -0.3, 'Y'), (-6.0, -12.2, 'R'), (14.0, 3.8, 'R'), (17.9, -8.4, 'R'), (-15.0, 25.1, 'R'), (-20.2, 23.1, 'Y'), (4.4, 59.5, 'Y')])
Traceback (most recent call last):
AssertionError: invalid stone positions

